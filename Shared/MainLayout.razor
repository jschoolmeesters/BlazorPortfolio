@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@using Components
@using System.Text.Json
@inject IJSRuntime JS

<main class="@(DarkMode ? "dark" : "")">

    <div class="min-h-[100vh] wrapper w-full max-w-[500px] mx-auto bg-stone-100 text-black dark:bg-black dark:text-white">

        <div class="z-[500] fixed top-0 w-full max-w-[500px]">
            <div id="navbar" class="navbar gsap-animate-transition relative z-[510] flex items-center @(ShowMenu ? "bg-stone-50" : "bg-stone-100") dark:bg-black px-3">
                <div class="inline-block h-[3.25rem]"><span @onclick="@(async () => NavigateToPage(""))" class="inline-block cursor-pointer text-sm py-1 px-3 my-3 rounded-full text-black bg-stone-200 dark:bg-stone-800 dark:text-white">Jordy Schoolmeesters</span></div>
                <span class="grow"></span>
                <div @onclick="@(()=> DarkMode = !DarkMode)" class="darkmode gsap-animate-transition text-xl h-[3.25rem] w-[3.25rem] rounded-full text-black dark:text-white grid cursor-pointer"><span class="block place-self-center @(DarkMode ? "iconoir-sun-light" : "iconoir-half-moon")"</span></div>
                <div class="z-[511] inline-block h-[3.25rem]"><span @onclick="@(async () => await OnMenuClick())" class="inline-block cursor-pointer text-sm py-1 px-3 my-3 rounded-full text-black bg-stone-200 dark:bg-stone-800 dark:text-white">@(ShowMenu ? "Close ×" : "Menu =")</span></div>
            </div>
            <div id="progress-container" class="@(!ShowMenu && NavigationManager.Uri.Contains("blog/post") ? "flex" : "hidden") bg-stone-100 dark:bg-black relative pt-0 p-2 w-full gap-x-1"></div>
        </div>

        <aside class="opacity-fade text-black dark:text-white bg-stone-50 dark:bg-black wrapper max-w-[500px] mx-auto fixed inset-0 overflow-hidden z-[499] @(ShowMenu ? "" : "hidden")" style="translate: none; rotate: none; scale: none; transform: translate(0px, 0px);">
            <nav class="flex absolute inset-0" style="translate: none; rotate: none; scale: none; transform: translate(0px, 0px);">
                <div class="flex flex-col justify-end w-full">
                    <div></div>
                    <ul class="p-4 flex flex-col items-start">
                        <li class="overflow-hidden">
                            <NavLink href="/" @onclick="@(async () => await OnMenuClick(false))" Match="NavLinkMatch.All" class="nav-link flex text-6xl text-60 uppercase font-normal leading-[1.05]" style="translate: none; rotate: none; scale: none; transform: translate(0px, 0px);">
                                <span class="text-slideup animation-delay-0">Index</span>
                            </NavLink>
                        </li>
                        <li class="overflow-hidden">
                            <NavLink href="/blog" @onclick="@(async () => await OnMenuClick(false))" class="nav-link flex text-6xl text-60 uppercase font-normal leading-[1.05]" style="translate: none; rotate: none; scale: none; transform: translate(0px, 0px);">
                                <span class="text-slideup animation-delay-1">Blog<span class="text-3xl align-top">[@PostCount]</span></span>
                            </NavLink>
                        </li>
                        <li class="overflow-hidden">
                        <NavLink class="nav-link disabled flex text-6xl text-60 uppercase font-normal leading-[1.05]" style="translate: none; rotate: none; scale: none; transform: translate(0px, 0px);">
                            <span class="text-slideup animation-delay-2 line-through">Services</span>
                        </NavLink>
                        </li>
                        <li class="overflow-hidden">
                        <NavLink class="nav-link disabled flex text-6xl text-60 uppercase font-normal leading-[1.05]" style="translate: none; rotate: none; scale: none; transform: translate(0px, 0px);">
                            <span class="text-slideup animation-delay-3 line-through">About</span>
                        </NavLink>
                        </li>
                        <li class="overflow-hidden">
                        <NavLink class="nav-link disabled flex text-6xl text-60 uppercase font-normal leading-[1.05]" style="translate: none; rotate: none; scale: none; transform: translate(0px, 0px);">
                            <span class="text-slideup animation-delay-4 line-through">Contact</span>
                        </NavLink>
                        </li>
                    </ul>
                    <div class="mb-4 mx-4">
                        <BlazorPortfolio.Components.Links />
                    </div>
                </div>
            </nav>
        </aside>
        <div class="@(EyeSaver ? "contrast-50" : "")">
            @Body
        </div>

    </div>
</main>


@code {
   [Inject]
   private HttpClient HttpClient { get; set; }
    private bool ShowMenu { get; set; } = false;
    private bool EyeSaver { get; set; } = false;
    private int PostCount { get; set; } = 0;
    private bool DarkMode { get; set; } = false;

    private ValueTask PreventScrolling(bool val) {
        return JS.InvokeVoidAsync("preventScrolling", val);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);
        await JS.InvokeVoidAsync("fadeIn");
    }

    private async Task OnMenuClick() {
        var val = !ShowMenu;
        ShowMenu = val;
        await PreventScrolling(val);
    }

    private async Task OnMenuClick(bool val) {
        ShowMenu = val;
        await PreventScrolling(val);
    }

    private async void NavigateToPage(string page) {
        var uri = Path.Combine(NavigationManager.BaseUri, page);

        if (!(uri == NavigationManager.Uri))
            NavigationManager.NavigateTo(uri);
            
        await OnMenuClick(false);
    }

   protected override async Task OnInitializedAsync()
   {
        var jsonContent = await HttpClient.GetStringAsync("posts/posts.json");
        var posts = JsonSerializer.Deserialize<List<Models.Post>>(jsonContent);
        if (posts != null)
                PostCount = posts.Count;
   }
}