@page "/"
@using System.Text.Json
@using BlazorPortfolio.Models;
@using System.Globalization
@inject NavigationManager NavigationManager
<PageTitle>Jordy Schoolmeesters</PageTitle>



<div class="w-full relative text-[#a6a999] bg-[#141612] pb-4 select-none">
   <div class="w-full h-[50vh] overflow-hidden">
      <div class="haha absolute mix-blend-difference inset-0  mx-auto w-full h-[50vh] object-cover z-[2]"></div>
      @*<div class=" mt-6 px-0 w-full relative flex flex-row justify-start items-center overflow-hidden">
         <h1 class="block sharp-grotesk-semibold text-[50vh] h-[50vh] leading-none text-[hsla(26,28%,95%,.9)]">
            JORDYSCHOOLMEESTERS
         </h1>
      </div>*@
      <div class="wrapper">
         <div class="marquee">
            <p class="sharp-grotesk-semibold text-[50vh] h-[50vh] leading-none text-[hsla(26,28%,95%,.9)] uppercase">&#8198;Jordy&#8198;Schoolmeesters</p>
            <p class="sharp-grotesk-semibold text-[50vh] h-[50vh] leading-none text-[hsla(26,28%,95%,.9)] uppercase">&#8198;Jordy&#8198;Schoolmeesters</p>
         </div>
      </div>
   </div>

   <p class="block w-2/3 px-4 text-[hsla(26,28%,95%,.9)] mb-6 mt-4">
      Hey! I'm Jordy - a computing science student, C# developer and producer interested in the field of DSP.
   </p>
</div>

<div class="w-full text-[#2d312a] bg-[#f6f2ef] p-4 open-sans-400 select-none">
   <span><h2 class="uppercase inline">blog</h2><i class="iconoir-rss-feed-tag text-xl float-right"></i></span>
   
   <label class="input input-bordered input-search flex items-center gap-2 mt-4 pl-[1.125rem] pr-3">
      <input type="text" class="grow" placeholder="Search..." @oninput="@HandleInputChange" @bind-value="@SearchValue"/>
      <i class="text-2xl p-1.5 rounded-lg iconoir-@(string.IsNullOrEmpty(SearchValue) ? "search" : "xmark hover:bg-[#00000010] hover:cursor-pointer")" @onclick="@(() => SearchValue = string.Empty)"></i>
   </label>

   @*<div class="open-sans-400 flex items-center mt-4 pb-0.5 px-2"><span class="cursor-pointer">Date<i class="iconoir-arrow-down"></i></span></div>
   <div class="w-full h-[1px] bg-[#2d312a] mb-4"></div>*@
   
   @foreach (var item in FilteredPosts) {
      var post = item.post;
      var index = item.i;
      <div @onclick="@(() => NavigateToPost(post))" class="my-4 hover:cursor-pointer post-preview">
         <h2 class="text-xl">@post.Title</h2>
         <div class="text-lg">@post.Date</div>
         <div>
            @* TODO: add sorting to tags *@
            @foreach (string tag in post.Tags.Split(',').Order()) {
               <div class="badge bg-[#2d312a] text-[hsla(26,28%,95%,.7)] ml-1">@tag</div>
            }
         </div>
      </div>
      @if (index < FilteredPosts.Count - 1) {
         <div class="w-full h-[1px] bg-[#2d312a] my-4"></div>
      }
   }

</div>



@code {
   [Inject]
   private HttpClient HttpClient { get; set; }
   private List<Models.Post> Posts { get; set; } = new List<Models.Post>();
   private string SearchValue { get; set; } = String.Empty;
   private List<(Models.Post post, int i)> FilteredPosts
   {
      get
      {
         return Posts.Where(p => string.IsNullOrEmpty(SearchValue) ? true : p.Title.ToLower().Contains(SearchValue.ToLower()))
                                 .OrderBy(p => p.DateAsDateTime)
                                 .Take(3)
                                 .Select((post, i) => ( post, i ))
                                 .ToList();
      }
   }
   protected override async Task OnInitializedAsync()
   {
      var jsonContent = await HttpClient.GetStringAsync("posts/posts.json");
      var posts = JsonSerializer.Deserialize<List<Models.Post>>(jsonContent);
      if (posts != null)
         Posts = posts;
   }

   private void NavigateToPost(Models.Post post)
   {
      NavigationManager.NavigateTo("post/" + post.Date + "/" + post.Id);
   }

   private void HandleInputChange(ChangeEventArgs e)
   {
      SearchValue = e.Value.ToString();
   }
}