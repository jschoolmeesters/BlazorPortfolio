@* This captures everything after /post/ instead of just one string *@
@page "/post/{*slug}" 

@using Markdig;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Markdig.Syntax;
@using System.IO
@using MarkdownHelper = BlazorPortfolio.Helpers.MarkdownHelper
@using BlazorPortfolio.Models

<PageTitle>@Title</PageTitle>
<h1>@Title</h1>
<h2>@Date</h2>
<ul>
    @foreach (var tag in Tags)
    {
        <li>@tag</li>
    }
</ul>
<div class="btn">test</div>
@HtmlContent

@code {
    // TODO: find out why httpclient gives nullable warning
    [Inject]
    private HttpClient HttpClient { get; set; }

    [Parameter]
    public string? Slug { get; set; }
    public MarkupString HtmlContent { get; set; }
    public PostFrontMatter FrontMatter { get; set; }
    public string Title { get; set; } = "";
    public string Date { get; set; } = "";
    public string[] Tags { get; set; } = new string[] { };

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Slug))
        {
            var trimmedSlug = Slug.TrimEnd('/');
            trimmedSlug = trimmedSlug.Contains('/') ? trimmedSlug.Substring(trimmedSlug.LastIndexOf(@"/")) : trimmedSlug;
            var fileName = trimmedSlug.Length > 1 && trimmedSlug[0] == '/' ? trimmedSlug.Substring(1) : trimmedSlug;
            Console.WriteLine(fileName);
            var uri = Path.Combine("posts", fileName + ".md");
            Console.WriteLine(uri);
            var markdownContent = await HttpClient.GetStringAsync(uri);

            // Extract front matter
            FrontMatter = MarkdownHelper.GetFrontMatter<PostFrontMatter>(markdownContent);
            Title = FrontMatter.Title;
            Date = FrontMatter.Date;
            Tags = FrontMatter.GetTags;
            
            // Extract content
            var content = MarkdownHelper.GetContent(markdownContent);
            HtmlContent = new MarkupString(Markdown.ToHtml(content));
            
            // string htmlContent = Markdown.ToHtml(markdownContent);
            // var doc = Markdown.Parse(markdownContent);
            // HtmlContent = new MarkupString(htmlContent);
            // TODO: switch to stream reader instead of string reader for better performance
        }
        
        base.OnInitialized();
    }
}
