@* This captures everything after /post/ instead of just one string *@
@page "/post/{*slug}" 

@using Markdig;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Markdig.Syntax;
@using System.IO
@using MarkdownHelper = BlazorPortfolio.Helpers.MarkdownHelper
@using BlazorPortfolio.Models
@using System.Text.Json

<PageTitle>@Title</PageTitle>

<div class="w-full p-4 select-none">
    <h1 class="text-2xl">@Title</h1>
    <h2 class="text-xl">@Date</h2>
    @foreach (string tag in Tags) {
        <div class="badge bg-[#2d312a] text-[hsla(26,28%,95%,.7)] ml-1">@tag</div>
    }

    <article class="prose lg:prose-xl mt-4 pt-4 border-t border-[hsla(26,28%,95%,.3)]">@HtmlContent</article>

</div>


@code {
    // TODO: find out why httpclient gives nullable warning
    [Inject]
    private HttpClient HttpClient { get; set; }

    [Parameter]
    public string? Slug { get; set; }
    public MarkupString HtmlContent { get; set; }
    public string Title { get; set; } = "";
    public string Date { get; set; } = "";
    public IEnumerable<string> Tags { get; set; } = new string[] { };

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Slug))
        {
            var trimmedSlug = Slug.TrimEnd('/');
            trimmedSlug = trimmedSlug.Contains('/') ? trimmedSlug.Substring(trimmedSlug.LastIndexOf(@"/")) : trimmedSlug;
            var fileName = trimmedSlug.Length > 1 && trimmedSlug[0] == '/' ? trimmedSlug.Substring(1) : trimmedSlug;

            var jsonContent = await HttpClient.GetStringAsync("posts/posts.json");
            var posts = JsonSerializer.Deserialize<List<Models.Post>>(jsonContent);
            if (posts != null) {
                var post = posts.FirstOrDefault(p => p.Id == fileName);
                if (post != null) {
                    Title = post.Title;
                    Date = post.Date;
                    Tags = post.TagsAsList;
                    var contentStartIndex = post.ContentStartIndex;

                    var uri = Path.Combine("posts", post.Id + ".md");
                    var markdownContent = await HttpClient.GetStringAsync(uri);
                    HtmlContent = new MarkupString(Markdown.ToHtml(markdownContent.Substring(contentStartIndex)));
                }
            }
        }
        
        base.OnInitialized();
    }
}
