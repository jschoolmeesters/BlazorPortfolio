@* This captures everything after /post/ instead of just one string *@
@page "/blog/post/{*slug}" 

@using Markdig;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Markdig.Syntax;
@using System.IO
@using MarkdownHelper = BlazorPortfolio.Helpers.MarkdownHelper
@using CustomLinkExtension = BlazorPortfolio.Helpers.CustomLinkExtension
@using BlazorPortfolio.Models
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>@Title</PageTitle>

<div class="w-full px-3 py-[3.5rem] select-none">
    @*<div id="progress-container" class="fixed bottom-0 left-0 p-2 w-full z-[1999] flex gap-x-1"></div>*@
    @*<div class="content-[''] w-full h-32 bg-[hsla(26,28%,95%,.5)] rounded"></div>*@
    <h2 class="text-sm p-0 m-0 mt-3 mb-2">@Date</h2>
    <h1 class="text-3xl tracking-tighter uppercase p-0 m-0 mt-3 mb-3 leading-none">@Title</h1>
    @foreach (string tag in Tags) {
        <div class="badge bg-black text-white border border-white rounded mr-2">@tag</div>
    }

    <article class="py-4 text-white">@HtmlContent</article>

    <div class="mt-9 flex flex-row border border-white rounded divide-x divide-white">
        @if (PreviousPost != null) {
            <div @onclick="@(() => NavigateToPost(PreviousPost))" class="flex-1 cursor-pointer flex flex-col justify-between">
                <div class="p-3">
                    <p class="text-sm p-0 m-0 mb-2">Previous post</p>
                    <h2 class="text-xl tracking-tighter uppercase p-0 m-0 mt-3 mb-3 leading-none">@PreviousPost.Title</h2>
                    <div class="text-sm p-0 m-0 mt-3 mb-2 uppercase">@PreviousPost.Date</div>
                    <div class="w-full overflow-x-scroll">
                        @foreach (string tag in PreviousPost.TagsAsList) {
                            <div class="badge bg-black text-white border border-white rounded mr-2">@tag</div>
                        }
                    </div>
                </div>
                <div class="w-full overflow-hidden border-t border-white p-3">
                    <p class="align-middle tracking-normal text-xl uppercase">Read✦</p>
                </div>
            </div>
        }

        @if (NextPost != null) {
            <div @onclick="@(() => NavigateToPost(NextPost))" class="flex-1 flex flex-col cursor-pointer justify-between">
                <div class="p-3">
                    <p class="text-sm p-0 m-0 mb-2">Next post</p>
                    <h2 class="text-xl tracking-tighter uppercase p-0 m-0 mt-3 mb-3 leading-none">@NextPost.Title</h2>
                    <div class="text-sm p-0 m-0 mt-3 mb-2 uppercase">@NextPost.Date</div>
                    <div class="w-full overflow-x-scroll">
                        @foreach (string tag in NextPost.TagsAsList) {
                            <div class="badge bg-black text-white border border-white rounded mr-2">@tag</div>
                        }
                    </div>
                </div>
                <div class="w-full overflow-hidden border-t border-white p-3">
                    <p class="align-middle tracking-normal text-xl uppercase">Read✦</p>
                </div>
            </div>
        }
    </div>
</div>


@code {
    // TODO: find out why httpclient gives nullable warning
    [Inject]
    private HttpClient HttpClient { get; set; }

    [Parameter]
    public string? Slug { get; set; }
    public MarkupString HtmlContent { get; set; }
    public string Title { get; set; } = "";
    public string Date { get; set; } = "";
    public IEnumerable<string> Tags { get; set; } = new string[] { };
    private Models.Post? PreviousPost { get; set; }
    private Models.Post? NextPost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Slug))
        {
            var trimmedSlug = Slug.TrimEnd('/');
            trimmedSlug = trimmedSlug.Contains('/') ? trimmedSlug.Substring(trimmedSlug.LastIndexOf(@"/")) : trimmedSlug;
            var fileName = trimmedSlug.Length > 1 && trimmedSlug[0] == '/' ? trimmedSlug.Substring(1) : trimmedSlug;

            var jsonContent = await HttpClient.GetStringAsync("posts/posts.json");
            var posts = JsonSerializer.Deserialize<List<Models.Post>>(jsonContent);
            if (posts != null) {
                var post = posts.FirstOrDefault(p => p.Id == fileName);
                if (post != null) {
                    Title = post.Title;
                    Date = post.Date;
                    Tags = post.TagsAsList;
                    var contentStartIndex = post.ContentStartIndex;

                    var uri = Path.Combine("posts", post.Id + ".md");
                    var markdownContent = await HttpClient.GetStringAsync(uri);
                    var pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Use<CustomLinkExtension>().Build();
                    HtmlContent = new MarkupString(Markdown.ToHtml(markdownContent.Substring(contentStartIndex), pipeline));

                    var orderedPosts = posts.OrderBy(p => p.DateAsDateTime).Select((post, i) => ( post, i )).ToList();
                    var currentIndex = orderedPosts.FindIndex(p => p.post.Id == post.Id);
                    if (currentIndex > 0) {
                        NextPost = orderedPosts[currentIndex - 1].post;
                    }
                    if (currentIndex < orderedPosts.Count - 1) {
                        PreviousPost = orderedPosts[currentIndex + 1].post;
                    }
                }
            }
        }
        
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

            JS.InvokeVoidAsync("initializeProgressBar");

    }

   private void NavigateToPost(Models.Post post)
   {
      var baseUri = NavigationManager.BaseUri;
      NavigationManager.NavigateTo(Path.Combine(baseUri, "blog", "post", post.DateAsUriString, post.Id.Substring(post.Id.LastIndexOf('/') + 1)), true);
   }
}
