@page "/blog"
@using System.Text.Json
@using BlazorPortfolio.Models;
@using System.Globalization
@inject NavigationManager NavigationManager
<PageTitle>Jordy Schoolmeesters â€” Blog</PageTitle>

<div class="w-full p-4 select-none">
   <div class="flex justify-between mt-4 text-[hsla(26,28%,95%,.5)]"><span class="self-center text-md uppercase">Latest posts&#8198;[@Posts.Count]</span><div class="flex">(<i class="self-center text-md iconoir-post-solid"></i>)</div></div>
   <div class="mt-3" />
   <label class="bg-blend-difference input input-bordered input-search flex items-center gap-2 pl-[1.125rem] pr-3">
      <input type="text" class="grow" placeholder="Search..." @oninput="@HandleInputChange" @bind-value="@SearchValue"/>
      <i class="text-2xl p-1.5 rounded-lg iconoir-@(string.IsNullOrEmpty(SearchValue) ? "search" : "xmark hover:bg-[#00000010] hover:cursor-pointer")" @onclick="@(() => SearchValue = string.Empty)"></i>
   </label>
   
   @foreach (var item in FilteredPosts) {
      var post = item.post;
      var index = item.i;
      <div @onclick="@(() => NavigateToPost(post))" class="my-4 hover:cursor-pointer post-preview">
         <h2 class="text-lg text-[hsla(26,28%,95%,.9)]">@post.Title</h2>
         <div class="text-md text-[hsla(26,28%,95%,.5)]">@post.Date</div>
         <div>
            @* TODO: add sorting to tags *@
            @foreach (string tag in post.Tags.Split(',').Order()) {
               <div class="badge bg-[#2d312a] text-[hsla(26,28%,95%,.7)] ml-1">@tag</div>
            }
         </div>
      </div>
      @if (index < FilteredPosts.Count - 1) {
         <div class="w-full h-[1px] bg-[hsla(26,28%,95%,.5)] my-4"></div>
      }
   }
</div>

@code {
   [Inject]
   private HttpClient HttpClient { get; set; }
   private List<Models.Post> Posts { get; set; } = new List<Models.Post>();
   private string SearchValue { get; set; } = String.Empty;
   private List<(Models.Post post, int i)> FilteredPosts
   {
      get
      {
         return Posts.Where(p => string.IsNullOrEmpty(SearchValue) ? true : p.Title.ToLower().Contains(SearchValue.ToLower()))
                                 .OrderBy(p => p.DateAsDateTime)
                                 .Take(3)
                                 .Select((post, i) => ( post, i ))
                                 .ToList();
      }
   }
   protected override async Task OnInitializedAsync()
   {
      var jsonContent = await HttpClient.GetStringAsync("posts/posts.json");
      var posts = JsonSerializer.Deserialize<List<Models.Post>>(jsonContent);
      if (posts != null)
         Posts = posts;
   }

   private void NavigateToPost(Models.Post post)
   {
      var baseUri = NavigationManager.BaseUri;
      NavigationManager.NavigateTo(Path.Combine(baseUri, "blog", "post", post.DateAsUriString, post.Id.Substring(post.Id.LastIndexOf('/') + 1)));
   }

   private void HandleInputChange(ChangeEventArgs e)
   {
      SearchValue = e.Value.ToString();
   }
}