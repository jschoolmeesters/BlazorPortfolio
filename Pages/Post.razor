@* This captures everything after /post/ instead of just one string *@
@page "/post/{*slug}" 

@using Markdig;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Markdig.Syntax;
@using System.IO
@using MarkdownHelper = BlazorPortfolio.Helpers.MarkdownHelper
@using BlazorPortfolio.Models
@using System.Text.Json
@inject NavigationManager NavigationManager

<PageTitle>@Title</PageTitle>

<div class="w-full p-4 select-none">
    <h1 class="text-2xl">@Title</h1>
    <h2 class="text-xl">@Date</h2>
    @foreach (string tag in Tags) {
        <div class="badge bg-[#2d312a] text-[hsla(26,28%,95%,.7)] ml-1">@tag</div>
    }

    <article class="prose lg:prose-xl mt-4 pt-4 border-t border-b border-[hsla(26,28%,95%,.3)] pb-4">@HtmlContent</article>

    @if (PreviousPost != null) {
        
        <div @onclick="@(() => NavigateToPost(PreviousPost))" class="hover:cursor-pointer post-preview border-b border-[hsla(26,28%,95%,.3)] py-4">
            <p class="text-[hsla(26,28%,95%,.5)] uppercase">Previous post</p>
            <h2 class="text-lg text-[hsla(26,28%,95%,.9)]">@PreviousPost.Title</h2>
            <div class="text-md text-[hsla(26,28%,95%,.5)]">@PreviousPost.Date</div>
            <div>
                @foreach (string tag in PreviousPost.Tags.Split(',')) {
                    <div class="badge bg-[#2d312a] text-[hsla(26,28%,95%,.7)] ml-1">@tag</div>
                }
            </div>
        </div>
    }
    @if (NextPost != null) {
        <div @onclick="@(() => NavigateToPost(NextPost))" class="hover:cursor-pointer post-preview border-b border-[hsla(26,28%,95%,.3)] py-4">
            <span class="text-[hsla(26,28%,95%,.5)] uppercase">Next post</span>
            <h2 class="text-lg text-[hsla(26,28%,95%,.9)]">@NextPost.Title</h2>
            <div class="text-md text-[hsla(26,28%,95%,.5)]">@NextPost.Date</div>
            <div>
                @foreach (string tag in NextPost.Tags.Split(',')) {
                    <div class="badge bg-[#2d312a] text-[hsla(26,28%,95%,.7)] ml-1">@tag</div>
                }
            </div>
        </div>
    }
</div>


@code {
    // TODO: find out why httpclient gives nullable warning
    [Inject]
    private HttpClient HttpClient { get; set; }

    [Parameter]
    public string? Slug { get; set; }
    public MarkupString HtmlContent { get; set; }
    public string Title { get; set; } = "";
    public string Date { get; set; } = "";
    public IEnumerable<string> Tags { get; set; } = new string[] { };
    private Models.Post? PreviousPost { get; set; }
    private Models.Post? NextPost { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Slug))
        {
            var trimmedSlug = Slug.TrimEnd('/');
            trimmedSlug = trimmedSlug.Contains('/') ? trimmedSlug.Substring(trimmedSlug.LastIndexOf(@"/")) : trimmedSlug;
            var fileName = trimmedSlug.Length > 1 && trimmedSlug[0] == '/' ? trimmedSlug.Substring(1) : trimmedSlug;

            var jsonContent = await HttpClient.GetStringAsync("posts/posts.json");
            var posts = JsonSerializer.Deserialize<List<Models.Post>>(jsonContent);
            if (posts != null) {
                var post = posts.FirstOrDefault(p => p.Id == fileName);
                if (post != null) {
                    Title = post.Title;
                    Date = post.Date;
                    Tags = post.TagsAsList;
                    var contentStartIndex = post.ContentStartIndex;

                    var uri = Path.Combine("posts", post.Id + ".md");
                    var markdownContent = await HttpClient.GetStringAsync(uri);
                    HtmlContent = new MarkupString(Markdown.ToHtml(markdownContent.Substring(contentStartIndex)));

                    var orderedPosts = posts.OrderBy(p => p.DateAsDateTime).Select((post, i) => ( post, i )).ToList();
                    var currentIndex = orderedPosts.FindIndex(p => p.post.Id == post.Id);
                    if (currentIndex > 0) {
                        NextPost = orderedPosts[currentIndex - 1].post;
                    }
                    if (currentIndex < orderedPosts.Count - 1) {
                        PreviousPost = orderedPosts[currentIndex + 1].post;
                    }
                }
            }
        }
        
        base.OnInitialized();
    }

   private void NavigateToPost(Models.Post post)
   {
      var baseUri = NavigationManager.BaseUri;
      NavigationManager.NavigateTo(Path.Combine(baseUri, "post", post.DateAsUriString, post.Id.Substring(post.Id.LastIndexOf('/') + 1)), true);
   }
}
